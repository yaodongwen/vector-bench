You are an expert database analyst. Given a database schema in JSON format, your task is to identify semantically rich columns in each table - those containing descriptive information like names, titles, descriptions, or textual content that conveys meaningful information about entities.

**Input Structure:**
{{
  "db_id": "database_name",
  "table_names_original": ["table1", "table2"],
  "table_names": ["table1", "table2"],
  "column_names_original": [
    [-1, "*"],
    [0, "column1"],
    [0, "column2"],
    [1, "column3"]
  ],
  "column_names": [
    [-1, "*"],
    [0, "column1"],
    [0, "column2"],
    [1, "column3"]
  ],
  "column_types": ["type1", "type2", "type3"],
  "primary_keys": [n1], "foreign_keys": [[n1, n2]],
  "table_description": {{
    "table1": "description of table1 columns",
    "table2": "description of table2 columns"
  }},
  "table_samples": {{
    "table1": [{{"column1": "value", "column2": "value"}}],
    "table2": [{{"column3": "value"}}]
  }}
}}

**Your Task:**
1. For each table in "table_names_original":
   - Identify columns that contain semantically rich information
   - Semantically rich columns typically:
     * Contain descriptive text (names, titles, descriptions)
     * Have column names indicating descriptive content (e.g., name, title, description, note, comment)
     * Store textual content rather than numerical/identifier data
     * Are mentioned in table descriptions as containing descriptive information

2. Output a JSON object where:
   - Keys are table names (from "table_names_original")
   - Values are arrays of objects with:
        {{
          "column_name": "original_column_name",
          "column_type": "column_data_type",
          "semantic_type": "detected_semantic_category"
        }}

3. Semantic categories should be one of:
   - "name" (e.g., product_name, customer_name)
   - "title" (e.g., job_title, book_title)
   - "description" (e.g., product_description, note)
   - "text_content" (e.g., comment, review, summary)
   - "category" (e.g., type, classification, status)

4. Focus on columns that:
   - Have text-based data types (text, varchar, etc.)
   - Contain descriptive information in sample data
   - Are described as containing semantic information in table_description

5. Avoid including:
   - Primary/foreign keys used only for relationships
   - Technical/identifier columns (IDs, codes, numbers)
   - Date/time fields unless explicitly descriptive
   - Numerical measurements

**Output Example:**
```json
{{
  "table1": [
    {{"column_name": "product_name", "column_type": "text", "semantic_type": "name"}},
    {{"column_name": "description", "column_type": "text", "semantic_type": "description"}}
  ],
  "table2": [
    {{"column_name": "title", "column_type": "text", "semantic_type": "title"}}
  ]
}}
```

**Special Considerations:**
- Use both column names, table description and sample data to determine semantic richness
- Prefer false positives over missing important semantic columns
- Include columns even if they're part of keys if they contain semantic value
- For columns with multiple semantic aspects, choose the most prominent one
- If no semantically rich columns exist in a table, return an empty array for that table

**Now process this database schema:**
{dababase_schema}

Let's think step by step
