[
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT ligand_id, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe given SQL query is searching for a ligand in the 'ligands' table based on vector similarity using the 'lembed' function. It is looking for the ligand name embedding that best matches the phrase \"Lige\" using the language model 'all-MiniLM-L6-v2'. The query selects the 'ligand_id' and the 'distance', which represents how closely the ligand name embedding is related to \"Lige\". The results are limited to just one entry that has the best match, in terms of the shortest distance.\n[EXPLANATION-END]\n\n[QUESTION-START]\nHey! Could you help me find the top ligand that's most closely related to \"Lige\"? I'd love to know its ID and how similar it is!\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "WITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") LIMIT 5\n)\nSELECT l.ligand_name, ma.predicted_delta_g, e.date\nFROM SimilarLigands l\nJOIN molecular_affinities ma ON l.ligand_id = ma.ligand_id\nJOIN experiments e ON ma.experiment_id = e.experiment_id\nORDER BY l.distance, ma.predicted_delta_g DESC;",
    "column_count": 3,
    "rows": 0,
    "complexity": "Complex",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") LIMIT 5\n)\nSELECT l.ligand_name, ma.predicted_delta_g, e.date\nFROM SimilarLigands l\nJOIN molecular_affinities ma ON l.ligand_id = ma.ligand_id\nJOIN experiments e ON ma.experiment_id = e.experiment_id\nORDER BY l.distance, ma.predicted_delta_g DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\nThe column information was not provided, but from the SQL query, we can infer some descriptions:\n- `ligand_id`: Unique identifier for a ligand.\n- `ligand_name`: Name of a ligand.\n- `distance`: Measure of similarity or dissimilarity.\n- `ma.predicted_delta_g`: Predicted change in free energy, related to molecular affinity.\n- `e.date`: Date related to an experiment.\n\n[EXPLANATION-START]\nThe SQL query first creates a temporary table called `SimilarLigands` that selects `ligand_id`, `ligand_name`, and `distance` from the `ligands` table. It uses a vector search operation to find ligands whose `ligand_name_embedding` column closely matches the vector embedding of \"Lige\" using the `lembed` function with the model 'all-MiniLM-L6-v2'. This search limits the results to the top 5 matches based on similarity.\n\nIn the main query, it selects the `ligand_name`, `predicted_delta_g`, and experiment `date` by joining the `SimilarLigands` table with the `molecular_affinities` and `experiments` tables. The join occurs through `ligand_id` in `SimilarLigands` and `molecular_affinities`, and through the `experiment_id` in `molecular_affinities` and `experiments`. The results are ordered first by `distance` to prioritize the most similar ligands and then by `predicted_delta_g` in descending order to emphasize higher predicted changes in free energy.\n[EXPLANATION-END]\n\n[QUESTION-START]\nI want to identify the top five ligands that are most closely related to the name \"Lige\" using the 'all-MiniLM-L6-v2' model for vector similarity. For these ligands, return their names, predicted changes in free energy, and the associated experiment dates, ordered by their similarity distance to \"Lige\" and then by the predicted change in free energy in descending order.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT experiment_id, distance\nFROM experiments\nWHERE result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Successful experiment with promising results\")\nLIMIT 5;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT experiment_id, distance\nFROM experiments\nWHERE result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Successful experiment with promising results\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\nGiven Column Information:\n- `experiment_id`: The unique identifier for each experiment.\n- `distance`: A numerical value representing the similarity distance between embeddings.\n- `result_summary_embedding`: A vector representation of the experiment's summary.\n\n[EXPLANATION-START]\nThe given SQL query searches the `experiments` table for records where the `result_summary_embedding` column matches the vector embedding of the phrase \"Successful experiment with promising results\" using the `lembed` function with model 'all-MiniLM-L6-v2'. This involves a vector similarity search where the embeddings of the summaries are compared to find the closest matches to the provided phrase. The query selects the `experiment_id` and the `distance`, which indicates how similar each experiment's result summary is to the provided phrase. The search results are limited to the top 5 closest matches, meaning it returns only the five experiments that are most similar to the described successful experiment.\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you provide the experiment IDs and their similarity distances for the top 5 experiments whose results most closely match the description \"Successful experiment with promising results\"?\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT t.volume, s.location\nFROM traffic_data t\nJOIN sensors s ON t.sensor_id = s.sensor_id\nWHERE s.type_embedding MATCH lembed('all-MiniLM-L6-v2', 'traffic volume sensor') AND s.k = 3;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT t.volume, s.location\nFROM traffic_data t\nJOIN sensors s ON t.sensor_id = s.sensor_id\nWHERE s.type_embedding MATCH lembed('all-MiniLM-L6-v2', 'traffic volume sensor') AND s.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "Certainly! Let's break down the provided SQL query and then formulate a natural language question based on it.\n\n[EXPLANATION-START]  \nThe SQL query is retrieving data from two tables, `traffic_data` and `sensors`, using a join condition based on the `sensor_id` column. It specifically selects the `volume` from the `traffic_data` table and the `location` from the `sensors` table. The query employs a vector search operation using the `lembed` function to find sensors whose type embedding closely matches the description \"traffic volume sensor\". The vector search is constrained to return only the top 3 results (`s.k = 3`), which implies these are the most closely related sensors based on vector similarity to the description provided.  \n[EXPLANATION-END]  \n\n[QUESTION-START]  \nHey! Could you find the traffic volumes and their corresponding locations for the top 3 sensors most similar to a \"traffic volume sensor\"?  \n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT ligand_id\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n- `ligand_id`: A unique identifier for each ligand.\n- `ligand_name_embedding`: A vector representation of ligand names used for similarity search.\n\n[EXPLANATION-START]\nThe SQL query is designed to find the `ligand_id` for the ligand whose name is most similar to the string \"Lige\" using vector similarity search. It utilizes the `lembed` function with the `all-MiniLM-L6-v2` model to transform \"Lige\" into an embedding. The query performs a match operation with this embedding against the `ligand_name_embedding` column in the `ligands` table. The `LIMIT 1` clause restricts the result to the single most similar ligand based on the vector representation.\n[EXPLANATION-END]\n\n[QUESTION-START]\nUser: \"I'm interested in finding a specific ligand.\"\nAssistant: \"Could you specify the name or part of the name you are looking for?\"\nUser: \"I remember part of the name being 'Lige'.\"\nAssistant: \"Great, we'll use vector search to find the ligand most similar to 'Lige'. How many similar ligands would you like to see?\"\nUser: \"Just one would be fine.\"\nAssistant: \"Perfect, I'll search for the ligand whose name is most closely related to 'Lige' using vector similarity and provide its unique identifier.\"\nUser: \"Thank you!\"\nAssistant: \"You're welcome! Let's proceed with the query.\"\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT location_id, name\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT location_id, name\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe SQL query retrieves the `location_id` and `name` from the `locations` table, specifically selecting the entry whose `name_embedding` is most similar to the vector representation of the description \"Central Park,\" generated using the model `all-MiniLM-L6-v2`. The operation utilizes the `MATCH` operator, which performs an approximate nearest neighbor (ANN) search to find the closest match based on this vector similarity. The query limits the result to just one entry, implying that it is looking for the single best match.\n[EXPLANATION-END]\n\n[QUESTION-START]\nWhich location can be associated with the description \"Central Park,\" and what is its identifier?\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\nIn this context, the `MATCH` operator is used for vector similarity search, leveraging the sqlite-vec extension. The vector representation of \"Central Park\" is produced by the `all-MiniLM-L6-v2` model, a transformer-based model that converts text into numerical vectors. The ANN search finds the closest vector in the `name_embedding` column, which represents the names of locations. The result is limited to a single entry (`LIMIT 1`), indicating a search for the top match. The vector comparison is typically performed using Euclidean distance, where similarity is inversely related to distance.\n[EXTERNAL-KNOWLEDGE-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT rowid, distance \nFROM sensors \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY\")\nORDER BY distance \nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT rowid, distance \nFROM sensors \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY\")\nORDER BY distance \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\nHere are the column descriptions based on the table `sensors`:\n1. `rowid`: A unique identifier for each record in the table.\n2. `distance`: The computed distance metric used for ordering the records.\n3. `location_embedding`: A vector representation of geographic locations.\n\n[EXPLANATION-START]\nThe SQL query retrieves records from the `sensors` table that match a specific location embedding vector for \"Central Park, New York, NY\" using the `lembed` function with the `all-MiniLM-L6-v2` model. The query aims to find the record with the smallest distance metric to this location embedding. It selects the `rowid` and the `distance` for the record, ordering the results by the `distance` in ascending order, and limits the output to only the closest match (i.e., the record with the smallest distance).\n[EXPLANATION-END]\n\n[QUESTION-START]\nFind the record from the `sensors` table that is most similar to the location \"Central Park, New York, NY\" based on its embedding vector, and return its unique identifier and distance metric.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT ligand_id, ligand_name, chemical_formula, molecular_weight, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 5;",
    "column_count": 5,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id, ligand_name, chemical_formula, molecular_weight, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\nThe column names and their descriptions are missing.\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id, ligand_name, chemical_formula, molecular_weight, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 5;\n```\n\n[EXPLANATION-START]\nThis SQL query is selecting specific columns from the `ligands` table, namely `ligand_id`, `ligand_name`, `chemical_formula`, `molecular_weight`, and `distance`. The query is performing a vector search using a vector embedding model (`all-MiniLM-L6-v2`) to find ligands whose names are most similar to the term \"Lige\". It uses the `MATCH` operation to compare the `ligand_name_embedding` column with the vector generated for the input \"Lige\". The query limits the result to 5 entries, meaning it retrieves the five ligands that are most similar to the term \"Lige\", ordered by their similarity distance.\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you provide the IDs, names, chemical formulas, molecular weights, and similarity distances of the 5 ligands whose names are most similar to \"Lige\"?\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "WITH WeatherSimilarity AS (\n    SELECT \n        weather_id,\n        timestamp AS weather_timestamp,\n        distance AS weather_distance\n    FROM weather_conditions\n    WHERE weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sunny weather with cool breeze\") \n    AND k = 5\n),\nSensorLocationSimilarity AS (\n    SELECT \n        sensor_id,\n        distance AS location_distance\n    FROM sensors\n    WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York City, NY, USA\")\n    AND k = 5\n),\nTrafficWeatherMatch AS (\n    SELECT \n        td.record_id,\n        td.volume,\n        ws.weather_id,\n        ws.weather_distance\n    FROM traffic_data td\n    JOIN WeatherSimilarity ws ON td.timestamp = ws.weather_timestamp\n    WHERE td.rain = 0\n),\nFinalResult AS (\n    SELECT \n        twm.record_id,\n        twm.volume,\n        sls.sensor_id,\n        sls.location_distance\n    FROM TrafficWeatherMatch twm\n    JOIN SensorLocationSimilarity sls ON twm.record_id = sls.sensor_id\n)\nSELECT \n    record_id, \n    volume\nFROM FinalResult\nORDER BY location_distance;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH WeatherSimilarity AS (\n    SELECT \n        weather_id,\n        timestamp AS weather_timestamp,\n        distance AS weather_distance\n    FROM weather_conditions\n    WHERE weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sunny weather with cool breeze\") \n    AND k = 5\n),\nSensorLocationSimilarity AS (\n    SELECT \n        sensor_id,\n        distance AS location_distance\n    FROM sensors\n    WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York City, NY, USA\")\n    AND k = 5\n),\nTrafficWeatherMatch AS (\n    SELECT \n        td.record_id,\n        td.volume,\n        ws.weather_id,\n        ws.weather_distance\n    FROM traffic_data td\n    JOIN WeatherSimilarity ws ON td.timestamp = ws.weather_timestamp\n    WHERE td.rain = 0\n),\nFinalResult AS (\n    SELECT \n        twm.record_id,\n        twm.volume,\n        sls.sensor_id,\n        sls.location_distance\n    FROM TrafficWeatherMatch twm\n    JOIN SensorLocationSimilarity sls ON twm.record_id = sls.sensor_id\n)\nSELECT \n    record_id, \n    volume\nFROM FinalResult\nORDER BY location_distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true,
    "responses": [
      "**Input Details Provided**\nColumn descriptions and additional information were not provided directly. However, based on the SQL query, we can infer some details:\n\n- `weather_conditions` likely contains information related to weather events, including embeddings for weather descriptions.\n- `sensors` likely contains sensor locations and embeddings for these locations.\n- `traffic_data` contains traffic records, including volume and timestamps.\n\nNow, let's proceed with the explanation and dialogue generation.\n\n---\n\n[EXPLANATION-START]\nThe SQL query performs several steps involving vector-based similarity matching and data filtering:\n\n1. **WeatherSimilarity Subquery:** This subquery searches for weather conditions similar to \"Sunny weather with cool breeze\" using vector embeddings with the `lembed` function. It limits the results to the top 5 closest matches based on distance. The results include `weather_id`, the timestamp when these conditions were recorded, and the similarity distance.\n\n2. **SensorLocationSimilarity Subquery:** This subquery searches for sensor locations similar to \"Central Park, New York City, NY, USA\" using vector embeddings. It also limits the results to the top 5 closest matches, including the `sensor_id` and the similarity distance.\n\n3. **TrafficWeatherMatch Subquery:** This subquery joins traffic data with the weather similarity results based on timestamps, filtering for traffic data where there is no rain (`td.rain = 0`). It retrieves the `record_id`, `volume` of traffic, `weather_id`, and the weather similarity distance.\n\n4. **FinalResult Subquery:** This final subquery joins the TrafficWeatherMatch results with the SensorLocationSimilarity results using the `record_id` and `sensor_id`. It selects the `record_id`, `volume`, `sensor_id`, and location similarity distance for the final results.\n\n5. **Final Selection:** The main query then selects and orders `record_id` and `volume` by `location_distance` from the FinalResult, effectively retrieving traffic volumes associated with the closest sensor locations and weather conditions.\n\n[EXPLANATION-END]\n\n[QUESTION-START]\nUser: \"I'm interested in some traffic data.\"\nAssistant: \"Could you specify the type of traffic conditions you are interested in?\"\nUser: \"Traffic under sunny weather with a cool breeze.\"\nAssistant: \"Would you like the search to focus on a particular location?\"\nUser: \"Yes, I'm interested in the area around Central Park in New York City.\"\nAssistant: \"How many similar weather and location matches would you like to consider?\"\nUser: \"About 5 matches for each should be sufficient.\"\nAssistant: \"Do you have any specific conditions, such as no rain?\"\nUser: \"Yes, I want data where there is no rain involved.\"\nAssistant: \"Understood. I'll retrieve traffic volumes for the closest matching weather and sensor locations sorted by proximity. Is there anything else you need?\"\nUser: \"No, that's all.\"\nAssistant: \"Let me help you translate this into an SQL query.\"\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH HighWDVOA AS (\n    SELECT t.team_id, t.team_name\n    FROM teams t\n    JOIN team_metrics tm ON t.team_id = tm.team_id\n    WHERE tm.wdvoa > 30 AND tm.season = 2023\n),\nSimilarGames AS (\n    SELECT g.game_id, g.home_team_id, g.away_team_id, distance\n    FROM games g\n    WHERE g.location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 500 Main St, San Francisco, CA. Capacity: 70,000. Home team: 49ers\") LIMIT 5\n)\nSELECT g.game_id, AVG(p.confidence_level) AS avg_confidence\nFROM SimilarGames sg\nJOIN games g ON g.game_id = sg.game_id\nJOIN game_predictions p ON p.game_id = g.game_id\nJOIN HighWDVOA h ON (g.home_team_id = h.team_id OR g.away_team_id = h.team_id)\nGROUP BY g.game_id\nHAVING avg_confidence > 0.8\nORDER BY avg_confidence DESC;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Complex",
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH HighWDVOA AS (\n    SELECT t.team_id, t.team_name\n    FROM teams t\n    JOIN team_metrics tm ON t.team_id = tm.team_id\n    WHERE tm.wdvoa > 30 AND tm.season = 2023\n),\nSimilarGames AS (\n    SELECT g.game_id, g.home_team_id, g.away_team_id, distance\n    FROM games g\n    WHERE g.location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 500 Main St, San Francisco, CA. Capacity: 70,000. Home team: 49ers\") LIMIT 5\n)\nSELECT g.game_id, AVG(p.confidence_level) AS avg_confidence\nFROM SimilarGames sg\nJOIN games g ON g.game_id = sg.game_id\nJOIN game_predictions p ON p.game_id = g.game_id\nJOIN HighWDVOA h ON (g.home_team_id = h.team_id OR g.away_team_id = h.team_id)\nGROUP BY g.game_id\nHAVING avg_confidence > 0.8\nORDER BY avg_confidence DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "Here is the response structured according to your requirements:\n\n[EXPLANATION-START]\nThe SQL query is composed of multiple parts:\n\n1. **Common Table Expression (CTE) - HighWDVOA**: This subquery selects the `team_id` and `team_name` from the `teams` table for teams that have a `wdvoa` value greater than 30 in the `team_metrics` table for the `season` of 2023.\n\n2. **Common Table Expression (CTE) - SimilarGames**: This subquery selects `game_id`, `home_team_id`, `away_team_id`, and `distance` from the `games` table for games whose location is closely related to the provided description of \"Stadium: 500 Main St, San Francisco, CA. Capacity: 70,000. Home team: 49ers\". This is done using a vector search with the `lembed` function from the `sqlite-lembed` extension, and it limits the results to the top 5 most similar games.\n\n3. **Final SELECT Statement**: The main query selects the `game_id` and calculates the average `confidence_level` from `game_predictions` for games identified in `SimilarGames` where either the home team or away team is part of the `HighWDVOA` teams. It groups results by `game_id` and filters those having an average `confidence_level` greater than 0.8. The results are ordered by the `avg_confidence` in descending order.\n\n[EXPLANATION-END]\n\n[QUESTION-START]\nIdentify the games, limited to the five most related to the description of stadium location \"Stadium: 500 Main St, San Francisco, CA. Capacity: 70,000. Home team: 49ers\", where the home or away team has a WDVOA greater than 30 for the 2023 season, and determine those games with an average confidence level above 0.8, ordered by their average confidence level in descending order.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT p.name\nFROM protein_targets p\nJOIN binding_sites b ON p.protein_id = b.protein_id\nWHERE p.name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Protine\")\nAND b.binding_affinity < -7.5\nAND p.k = 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.name\nFROM protein_targets p\nJOIN binding_sites b ON p.protein_id = b.protein_id\nWHERE p.name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Protine\")\nAND b.binding_affinity < -7.5\nAND p.k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n- `protein_targets`: A table containing details about protein targets.\n  - `protein_id`: The unique identifier for each protein.\n  - `name`: The name of the protein.\n  - `name_embedding`: A vector embedding of the protein name for similarity searches.\n\n- `binding_sites`: A table that contains information about binding sites related to proteins.\n  - `protein_id`: The unique identifier for the protein associated with the binding site.\n  - `binding_affinity`: A measure of how strongly a binding site interacts with a protein.\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.name\nFROM protein_targets p\nJOIN binding_sites b ON p.protein_id = b.protein_id\nWHERE p.name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Protine\")\nAND b.binding_affinity < -7.5\nAND p.k = 1;\n```\n\n[EXPLANATION-START]\nThe SQL query is designed to retrieve specific protein names from the `protein_targets` table that meet certain conditions. Initially, it performs a join between the `protein_targets` table and the `binding_sites` table using the `protein_id` as the key, ensuring that we are considering proteins and their associated binding sites.\n\nThe query then focuses on proteins whose name embeddings are similar to the embedding generated from the term \"Protine,\" using the `lembed` function with the 'all-MiniLM-L6-v2' model. This is a vector search operation that identifies protein names most related to the word \"Protine.\"\n\nFurthermore, the query filters the results to include only those proteins whose binding sites have a binding affinity of less than -7.5, indicating a strong interaction.\n\nFinally, the query specifies `p.k = 1`, which ensures that the retrieval is based on the closest or most direct match, potentially limiting the result to the most relevant protein name based on vector similarity and binding affinity conditions.\n\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you identify the protein names that are most closely related to \"Protine\" and have associated binding sites with a binding affinity less than -7.5?\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa,\n        AVG(tm.ego) AS avg_ego\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nHomeTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.home_team_id,\n        tp.avg_wdvoa AS home_avg_wdvoa,\n        tp.avg_ego AS home_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id AND g.season = tp.season\n),\nAwayTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.away_team_id,\n        tp.avg_wdvoa AS away_avg_wdvoa,\n        tp.avg_ego AS away_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.away_team_id = tp.team_id AND g.season = tp.season\n),\nBettingAndPredictions AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_betting_spread,\n        AVG(gp.confidence_level) AS avg_confidence\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY g.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id,\n    hta.home_avg_wdvoa - ata.away_avg_wdvoa AS wdvoa_diff,\n    hta.home_avg_ego - ata.away_avg_ego AS ego_diff,\n    bap.avg_betting_spread,\n    bap.avg_confidence,\n    ls.location_similarity\nFROM games g\nJOIN HomeTeamAnalysis hta ON g.game_id = hta.game_id\nJOIN AwayTeamAnalysis ata ON g.game_id = ata.game_id\nJOIN BettingAndPredictions bap ON g.game_id = bap.game_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE hta.home_avg_ego > ata.away_avg_ego\nORDER BY g.game_id;",
    "column_count": 6,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa,\n        AVG(tm.ego) AS avg_ego\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nHomeTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.home_team_id,\n        tp.avg_wdvoa AS home_avg_wdvoa,\n        tp.avg_ego AS home_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id AND g.season = tp.season\n),\nAwayTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.away_team_id,\n        tp.avg_wdvoa AS away_avg_wdvoa,\n        tp.avg_ego AS away_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.away_team_id = tp.team_id AND g.season = tp.season\n),\nBettingAndPredictions AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_betting_spread,\n        AVG(gp.confidence_level) AS avg_confidence\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY g.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id,\n    hta.home_avg_wdvoa - ata.away_avg_wdvoa AS wdvoa_diff,\n    hta.home_avg_ego - ata.away_avg_ego AS ego_diff,\n    bap.avg_betting_spread,\n    bap.avg_confidence,\n    ls.location_similarity\nFROM games g\nJOIN HomeTeamAnalysis hta ON g.game_id = hta.game_id\nJOIN AwayTeamAnalysis ata ON g.game_id = ata.game_id\nJOIN BettingAndPredictions bap ON g.game_id = bap.game_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE hta.home_avg_ego > ata.away_avg_ego\nORDER BY g.game_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n\n1. `team_metrics`: Contains metrics related to teams such as their performance metrics (`wdvoa` and `ego`) for different seasons.\n2. `games`: Details of games including `game_id`, `home_team_id`, and `away_team_id`, and their vector embeddings for location search.\n3. `betting_data`: Information on betting spreads for different games identified by `game_id`.\n4. `game_predictions`: Predictions for games including `confidence_level`, associated with `game_id`.\n\n[EXPLANATION-START]\nThe SQL query performs several operations to analyze game outcomes and team performances with additional insights from vector searches for location similarity. Here’s a breakdown:\n\n1. **TeamPerformance CTE**: Computes average performance metrics, `wdvoa` and `ego`, for teams (`team_id`) across seasons (`season`). The average is calculated using `AVG` function and grouped by `team_id` and `season`.\n\n2. **HomeTeamAnalysis CTE**: Joins game data (`games`) with team performance data (`TeamPerformance`) to assess the home team's average performance metrics (`home_avg_wdvoa` and `home_avg_ego`) for each game.\n\n3. **AwayTeamAnalysis CTE**: Similar to HomeTeamAnalysis, but focuses on the away team’s metrics (`away_avg_wdvoa` and `away_avg_ego`).\n\n4. **BettingAndPredictions CTE**: Computes averages for `betting_spread` and `confidence_level` for games by joining `games`, `betting_data`, and `game_predictions`.\n\n5. **LocationSimilarity CTE**: Utilizes vector search to find games with similar location embeddings to a specified target vector (\"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\"). It leverages the `sqlite-lembed` extension for this purpose, ordering results by `distance` to find the closest matches and limiting to 5 entries.\n\n6. The final `SELECT` statement combines data from these CTEs to calculate the difference in performance metrics (`wdvoa_diff` and `ego_diff`) between home and away teams for games where the home team has a higher `avg_ego` than the away team. It also includes average betting spread, confidence levels, and location similarity. Results are ordered by `game_id`.\n\n[EXPLANATION-END]\n\n[QUESTION-START]\nUser: \"I'm interested in analyzing some football games.\"\n\nAssistant: \"What kind of analysis are you looking to perform on these games?\"\n\nUser: \"I want to compare home and away team performances and see how betting predictions align.\"\n\nAssistant: \"Great! What specific metrics would you like to compare between the home and away teams?\"\n\nUser: \"I'd like to look at differences in their WDVOA and ego scores.\"\n\nAssistant: \"Understood. Would you also like to include betting spreads and prediction confidence levels in your analysis?\"\n\nUser: \"Yes, I think those will provide more insights into the game's outcomes.\"\n\nAssistant: \"Is there any criteria you'd like to specify for the games to be analyzed?\"\n\nUser: \"I want to focus on games where the home team has a higher ego score than the away team.\"\n\nAssistant: \"Got it. Now, we can also consider location similarity using vector search. How does the target location for this search sound: 'Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots'?\"\n\nUser: \"That sounds perfect. How many games similar to this location would you like to include?\"\n\nAssistant: \"Let's limit it to 5 games for a focused analysis.\"\n\nUser: \"Yes, that works well.\"\n\nAssistant: \"Alright, I will incorporate all these elements into an SQL query to help you analyze the games.\"\n\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT location_id\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York\") \nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT location_id\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n{\n- `location_id`: Identifier for the location\n- `name_embedding`: Vector representation of the location name for similarity searches\n- `name`: Human-readable name of the location\n}\n\n[EXPLANATION-START]\nThe SQL query is designed to find the `location_id` of a location in the `locations` table that most closely matches the name \"Central Park, New York\" using a vector similarity search. It utilizes the SQLite extension `sqlite-lembed` to perform this operation. Specifically, it compares the `name_embedding` column (which stores vector representations of location names) against the vector representation of the phrase \"Central Park, New York\" generated by the `lembed` function with the model 'all-MiniLM-L6-v2'. The operation is constrained to return only the most relevant match due to the `LIMIT 1` clause.\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you provide the location ID for the place most similar to \"Central Park, New York\" using vector-based similarity?\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "WITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") -- Generating a variation of the ligand name \"Ligand\" to perform fuzzy matching\n    ORDER BY distance\n    LIMIT 5\n),\nAffinityPredictions AS (\n    SELECT ap.experiment_id, ap.confidence_level\n    FROM affinity_predictions ap\n    JOIN molecular_affinities ma ON ap.experiment_id = ma.experiment_id\n    WHERE ap.tool_id = (\n        SELECT tool_id\n        FROM software_tools\n        WHERE name = 'ToolName' AND version = 'VersionX'\n    )\n)\nSELECT sl.ligand_name, AVG(ap.confidence_level) AS average_confidence\nFROM SimilarLigands sl\nJOIN experiments e ON sl.ligand_id = e.ligand_id\nJOIN AffinityPredictions ap ON e.experiment_id = ap.experiment_id\nGROUP BY sl.ligand_name\nHAVING average_confidence > 0.7;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Complex",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") -- Generating a variation of the ligand name \"Ligand\" to perform fuzzy matching\n    ORDER BY distance\n    LIMIT 5\n),\nAffinityPredictions AS (\n    SELECT ap.experiment_id, ap.confidence_level\n    FROM affinity_predictions ap\n    JOIN molecular_affinities ma ON ap.experiment_id = ma.experiment_id\n    WHERE ap.tool_id = (\n        SELECT tool_id\n        FROM software_tools\n        WHERE name = 'ToolName' AND version = 'VersionX'\n    )\n)\nSELECT sl.ligand_name, AVG(ap.confidence_level) AS average_confidence\nFROM SimilarLigands sl\nJOIN experiments e ON sl.ligand_id = e.ligand_id\nJOIN AffinityPredictions ap ON e.experiment_id = ap.experiment_id\nGROUP BY sl.ligand_name\nHAVING average_confidence > 0.7;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "Certainly! Let's break down the SQL query and formulate a descriptive natural language question based on it.\n\n[EXPLANATION-START]\nThe SQL query begins by creating a common table expression (CTE) named SimilarLigands. This CTE retrieves ligand IDs, names, and their respective distances from the `ligands` table. It uses a vector search operation with `lembed('all-MiniLM-L6-v2', \"Lige\")` to perform a fuzzy match on the ligand name, aiming to find entries that are similar to \"Ligand\", misnamed as \"Lige\". The results are ordered by distance and limited to the top 5 closest matches.\n\nAnother CTE, AffinityPredictions, is created to select experiment IDs and confidence levels from the `affinity_predictions` table. It joins with the `molecular_affinities` table to ensure that the experiment IDs match. The selected tool ID corresponds to the tool named 'ToolName' with version 'VersionX' from the `software_tools` table.\n\nFinally, the main query selects ligand names from the SimilarLigands CTE and calculates the average confidence level from the AffinityPredictions CTE joined via experiment IDs. This result is grouped by ligand names and only those with an average confidence level greater than 0.7 are returned.\n[EXPLANATION-END]\n\n[QUESTION-START]\nI am looking to find the names of ligands that are most similar to the given name \"Lige\", limited to the top 5 matches based on distance. Additionally, I want to know the average confidence level for these ligands, derived from experiments using the tool 'ToolName' version 'VersionX'. The results should only include ligands with an average confidence level greater than 0.7.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "SELECT game_id, home_team_id, distance\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \nLIMIT 5;",
    "column_count": 3,
    "rows": 0,
    "complexity": "Simple",
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT game_id, home_team_id, distance\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n1. `game_id`: Identifier for the game.\n2. `home_team_id`: Identifier for the home team.\n3. `distance`: Measure of similarity or closeness between locations.\n\n[EXPLANATION-START]\nThe SQL query retrieves data from the `games` table. It selects three columns: `game_id`, `home_team_id`, and `distance`. The query uses a vector similarity operation to find entries where the `location_embedding` matches an embedding generated from the description \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\" using the `lembed` function with the model 'all-MiniLM-L6-v2'. This operation searches for games with locations similar to the specified stadium in Boston. The results are limited to the first 5 entries, which are the most closely related in terms of the location descriptor provided.\n[EXPLANATION-END]\n\n[QUESTION-START]\nPlease identify the five games with locations most similar to the description of the stadium at 123 Main St, Boston, MA, which seats 50,000 and is home to the Patriots. I need the game IDs, home team IDs, and their similarity distances.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT rowid, distance \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT rowid, distance \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe SQL query is performing a vector similarity search in a SQLite database using the sqlite-vec extension, specifically querying the `locations` table. The query uses the `MATCH` operator with the `lembed` function, which performs an approximate nearest neighbor (ANN) search for vector embeddings. It searches for records where the `name_embedding` column matches the vector representation of \"Central Park,\" generated by the 'all-MiniLM-L6-v2' model. The query retrieves the `rowid` and `distance` for the most similar record, limited to one result.\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you identify a location that is most closely related to Central Park based on embedded meanings?\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\nIn vector operations, the `MATCH` operator is used to find approximate nearest neighbors by comparing vectors using Euclidean distance. The function `lembed('all-MiniLM-L6-v2', \"Central Park\") generates a vector embedding for the text \"Central Park\" using the specified model, facilitating the search for semantically similar items. The query limits the result to one item, focusing on the most similar location in terms of vector embeddings, with similarity increasing as the distance decreases.\n[EXTERNAL-KNOWLEDGE-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH BettingAnalysis AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_initial_spread,\n        COUNT(*) AS total_bets\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    GROUP BY g.game_id\n),\nPredictionAnalysis AS (\n    SELECT \n        gp.game_id,\n        AVG(gp.confidence_level) AS avg_confidence,\n        SUM(CASE WHEN gp.make_pick = 1 AND g.pick_right = 1 THEN 1 ELSE 0 END) AS correct_predictions\n    FROM games g\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY gp.game_id\n),\nTeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id\nFROM games g\nJOIN BettingAnalysis ba ON g.game_id = ba.game_id\nJOIN PredictionAnalysis pa ON g.game_id = pa.game_id\nJOIN TeamPerformance tp ON g.home_team_id = tp.team_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE pa.correct_predictions > 2\nORDER BY g.game_id;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH BettingAnalysis AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_initial_spread,\n        COUNT(*) AS total_bets\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    GROUP BY g.game_id\n),\nPredictionAnalysis AS (\n    SELECT \n        gp.game_id,\n        AVG(gp.confidence_level) AS avg_confidence,\n        SUM(CASE WHEN gp.make_pick = 1 AND g.pick_right = 1 THEN 1 ELSE 0 END) AS correct_predictions\n    FROM games g\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY gp.game_id\n),\nTeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id\nFROM games g\nJOIN BettingAnalysis ba ON g.game_id = ba.game_id\nJOIN PredictionAnalysis pa ON g.game_id = pa.game_id\nJOIN TeamPerformance tp ON g.home_team_id = tp.team_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE pa.correct_predictions > 2\nORDER BY g.game_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**  \nUnfortunately, the column information is not provided in the task setup, so I will proceed with the SQL query analysis and question formulation without it.\n\n[EXPLANATION-START]  \nThe given SQL query executes a complex operation involving multiple Common Table Expressions (CTEs) and joins to derive specific information about games. Here's a step-by-step explanation:\n\n1. **BettingAnalysis CTE**: This segment calculates the average initial betting spread and counts the total bets placed on each game, grouping the results by game ID from the `betting_data` and `games` tables.\n\n2. **PredictionAnalysis CTE**: It computes the average confidence level of predictions and counts the number of correct predictions for each game. A correct prediction is identified when both `make_pick` and `pick_right` are 1. The results are grouped by game ID.\n\n3. **TeamPerformance CTE**: This part calculates the average WDVOA (Weighted Defense-adjusted Value Over Average) for each team per season from the `team_metrics` table.\n\n4. **LocationSimilarity CTE**: It identifies the similarity of game locations using a vector search based on location embeddings. This operation matches game locations against a specific embedding description, \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots,\" using the `lembed` function. The top 5 matches are ordered by distance, indicating their similarity.\n\n5. **Final SELECT statement**: The main query fetches `game_id` from the `games` table, joining it with results from the CTEs. The condition applied filters games where the number of correct predictions exceeds 2. The results are ordered by game ID.\n\n[EXPLANATION-END]\n\n[QUESTION-START]  \nI need to find the IDs of games where the number of correct predictions exceeds two, considering several factors. First, analyze games to determine the average initial betting spread and total bets placed. Next, look into predictions to calculate the average confidence level and identify correct predictions. Additionally, assess team performance by calculating the average WDVOA for each team during each season. Lastly, find the top 5 game locations most similar to \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots,\" sorted by similarity distance.  \n[QUESTION-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT location_id, name \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park in New York City\") \nORDER BY distance \nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT location_id, name \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park in New York City\") \nORDER BY distance \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe SQL query is selecting the `location_id` and `name` from the `locations` table. It uses a vector search operation to find the location whose name is most similar to the phrase \"Central Park in New York City.\" This similarity operation is performed using the `name_embedding` column with the `lembed` extension, which matches vectors based on their semantic similarity. The query orders the results by the `distance` from the given phrase and limits the output to the single most relevant result.\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you tell me which location has a name most similar to \"Central Park in New York City\" and provide its identifier?\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "WITH RelevantExperimentData AS (\n    SELECT e.experiment_id, e.result_summary\n    FROM experiments e\n    JOIN molecular_affinities ma ON e.experiment_id = ma.experiment_id\n    WHERE ma.predicted_delta_g < -5.0\n),\nSimilarExperiments AS (\n    SELECT e.experiment_id, e.result_summary, distance\n    FROM experiments e\n    WHERE e.result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Optimal binding affinity results\") AND k = 10\n    ORDER BY distance\n),\nFinalData AS (\n    SELECT re.experiment_id, re.result_summary\n    FROM RelevantExperimentData re\n    JOIN SimilarExperiments se ON re.experiment_id = se.experiment_id\n)\nSELECT fd.result_summary\nFROM FinalData fd\nORDER BY fd.experiment_id\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Complex",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RelevantExperimentData AS (\n    SELECT e.experiment_id, e.result_summary\n    FROM experiments e\n    JOIN molecular_affinities ma ON e.experiment_id = ma.experiment_id\n    WHERE ma.predicted_delta_g < -5.0\n),\nSimilarExperiments AS (\n    SELECT e.experiment_id, e.result_summary, distance\n    FROM experiments e\n    WHERE e.result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Optimal binding affinity results\") AND k = 10\n    ORDER BY distance\n),\nFinalData AS (\n    SELECT re.experiment_id, re.result_summary\n    FROM RelevantExperimentData re\n    JOIN SimilarExperiments se ON re.experiment_id = se.experiment_id\n)\nSELECT fd.result_summary\nFROM FinalData fd\nORDER BY fd.experiment_id\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\nThe database schema is not provided, but we can infer from the query:\n- `experiments`: Contains `experiment_id` and `result_summary`.\n- `molecular_affinities`: Contains `experiment_id` and `predicted_delta_g`.\n- Vector search capabilities are indicated by usage of embeddings and similarity distance.\n\n[EXPLANATION-START]\nThe SQL query consists of multiple operations aimed at identifying specific experiment results based on molecular affinity and similarity in result summaries. \n\n1. **RelevantExperimentData**: This CTE selects `experiment_id` and `result_summary` from the `experiments` table where related experiments have a `predicted_delta_g` value of less than -5.0, indicating high affinity.\n\n2. **SimilarExperiments**: This CTE selects experiments (`experiment_id` and `result_summary`) that have similar summaries to the phrase \"Optimal binding affinity results.\" The similarity is determined using vector embeddings via a `MATCH lembed` function with the model 'all-MiniLM-L6-v2'. It retrieves the top 10 most similar experiments based on the distance, ordered by the degree of similarity (i.e., the distance).\n\n3. **FinalData**: This CTE joins `RelevantExperimentData` with `SimilarExperiments`, selecting those experiments that meet both criteria: having a high affinity (`predicted_delta_g < -5.0`) and highly similar result summaries.\n\nFinally, the query selects the `result_summary` from `FinalData`, ordering by `experiment_id` and limiting the result to the top one entry.\n\n[EXPLANATION-END]\n\n[QUESTION-START]\nHey! Could you find me the result summary of the experiment that has the highest binding affinity, with a predicted delta G of less than -5.0, and whose result summary is super similar to \"Optimal binding affinity results\"? I'm looking for just the top one, so make sure it's the most relevant in terms of similarity. Thanks!\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT hip_no, horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star Light\")\nAND k = 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no, horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star Light\")\nAND k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n- `hip_no`: The identification number of the horse.\n- `horse_name`: The name of the horse.\n- `horse_name_embedding`: A vector representation of the horse's name used for similarity searches.\n\n[EXPLANATION-START]\nThe SQL query is searching for horses in the database whose name is most similar to the phrase \"Star Light\". It uses a vector similarity search on the `horse_name_embedding` column with the pre-trained model 'all-MiniLM-L6-v2' to find the closest match. The query retrieves the horse's identification number (`hip_no`) and name (`horse_name`) for the top result, where `k = 1` specifies that only the single most similar entry should be returned.\n[EXPLANATION-END]\n\n[QUESTION-START]\nWhich horse is most closely connected to the concept of \"Star Light\" in terms of its name?\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\nThe \"MATCH\" operator in SQLite with sqlite-lembed extension performs an approximate nearest neighbor search using vector embeddings. The model 'all-MiniLM-L6-v2' provides embeddings that capture semantic meaning, allowing for comparison based on similarity. The parameter `k = 1` indicates that the query retrieves the single most relevant entry based on vector similarity, which is commonly computed using Euclidean distance. The relevance of a horse's name to \"Star Light\" is determined by how closely its name's vector representation matches the embedding of \"Star Light\".\n[EXTERNAL-KNOWLEDGE-END]"
    ]
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT td.volume\nFROM traffic_data td\nJOIN weather_conditions wc ON td.timestamp = wc.timestamp\nWHERE wc.weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"heavy rainstorm and strong winds\") AND k = 3;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT td.volume\nFROM traffic_data td\nJOIN weather_conditions wc ON td.timestamp = wc.timestamp\nWHERE wc.weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"heavy rainstorm and strong winds\") AND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe SQL query selects the traffic data volume from the table `traffic_data`, which is joined with the `weather_conditions` table based on matching timestamps. The query specifically searches for instances where the `weather_description_embedding` in the `weather_conditions` table matches a vector embedding of the phrase \"heavy rainstorm and strong winds\" using the `lembed` extension, which is likely to perform a similarity search. It aims to find the top 3 closest matches (`k = 3`) for this weather description.\n[EXPLANATION-END]\n\n[QUESTION-START]\nTraffic volumes during the top 3 weather conditions most similar to \"heavy rainstorm and strong winds\".\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "SELECT game_id, home_team_id, away_team_id\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\nORDER BY distance\nLIMIT 3;",
    "column_count": 3,
    "rows": 0,
    "complexity": "Simple",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT game_id, home_team_id, away_team_id\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\nORDER BY distance\nLIMIT 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe SQL query is designed to find the top 3 games that are most closely related to a specific location description based on vector similarity. It retrieves the `game_id`, `home_team_id`, and `away_team_id` from the `games` table where the `location_embedding` column matches a specific vector embedding created from the description \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\" using the model `all-MiniLM-L6-v2`. The results are ordered by the similarity distance, implying that the most similar matches appear first.\n[EXPLANATION-END]\n\n[QUESTION-START]\nI need to find the top 3 games that are most closely associated with the stadium located at 123 Main St, Boston, MA, which has a capacity of 50,000 and where the home team is the Patriots. The results should list the game IDs, home team IDs, and away team IDs, sorted by their similarity to this location description.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT hip_no, horse_name, sire, dam\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Philly\")\nLIMIT 5;",
    "column_count": 4,
    "rows": 0,
    "complexity": "Simple",
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no, horse_name, sire, dam\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Philly\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe given SQL query is designed to retrieve specific details about horses from the \"horses\" table. It selects the columns \"hip_no,\" \"horse_name,\" \"sire,\" and \"dam,\" where \"horse_name_embedding\" matches the vector representation of the word \"Philly\" using the \"all-MiniLM-L6-v2\" model. This operation uses the sqlite-lembed extension, which performs an approximate nearest neighbor (ANN) search to find items in the database that have embeddings similar to the queried term. The query is limited to returning the top 5 most similar horses based on their name embeddings.\n[EXPLANATION-END]\n\n[QUESTION-START]\nEmbark on a journey to discover the tales of five horses whose names resonate with the spirit of Philly. What are the hip numbers, names, sires, and dams of these equine beings?\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\nThe \"MATCH\" operator in this query facilitates an approximate nearest neighbor (ANN) search, which is used to find items that have embeddings closely aligned with the vector representation of \"Philly\" generated by the \"all-MiniLM-L6-v2\" model. This model transforms textual data into embeddings, which can be compared using Euclidean distance (L2 norm) to determine similarity. The query is designed to return the top 5 horses whose name embeddings are closest to the vector for \"Philly,\" illustrating how vector similarity decreases as distance increases.\n[EXTERNAL-KNOWLEDGE-END]"
    ]
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT hip_no\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\") \nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n- `hip_no`: The unique number assigned to each horse.\n- `horse_name_embedding`: The vector representation of a horse's name for similarity searches.\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\") \nLIMIT 1;\n```\n\n[EXPLANATION-START]\nThe SQL query is designed to select the unique number (`hip_no`) of a horse from the `horses` table. It employs a vector search to find horses whose name embeddings are most similar to the vector representation of the term \"Kri\". This is done using the `lembed` function, which generates a vector for \"Kri\" using the model `all-MiniLM-L6-v2`. The query returns only one result due to the `LIMIT 1` clause, meaning it finds the single horse most closely associated with the name \"Kri\".\n[EXPLANATION-END]\n\n[QUESTION-START]\nHey there! Can you fetch me the hip number of the horse that has a name most similar to \"Kri\"? I just need the top match, thanks!\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "SELECT game_id, distance \nFROM games \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', 'Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots') \nORDER BY distance \nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT game_id, distance \nFROM games \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', 'Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots') \nORDER BY distance \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n\nBelow are column names and their corresponding descriptions:\n- `game_id`: The unique identifier for each game.\n- `location_embedding`: A vector representation of the game's location details, used for similarity searches.\n- `distance`: A numerical measure of how close the match is in the vector space.\n\n[EXPLANATION-START]\nThe SQL query is selecting two columns, `game_id` and `distance`, from the `games` table. It performs a vector similarity search using the `location_embedding` column, which is matched against an embedding generated from the string \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\". This operation utilizes the `lembed` function with the model 'all-MiniLM-L6-v2', which produces a vector representation of the input string. The query then orders the results by the `distance` column, which measures similarity, and limits the output to just one result with the smallest `distance`, meaning the closest match.\n[EXPLANATION-END]\n\n[QUESTION-START]\nHey there! Can you find the game that's most similar to being held at the stadium located at 123 Main St, Boston, MA with a capacity of 50,000 and the home team being the Patriots? I'd love to know the game ID and how closely it matches!\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT h.horse_name, a.auction_name\nFROM horses h\nJOIN auctions a ON h.auction_id = a.auction_id\nWHERE h.horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star\")\nAND a.status = 'Active'\nAND h.k = 5\nORDER BY h.distance;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT h.horse_name, a.auction_name\nFROM horses h\nJOIN auctions a ON h.auction_id = a.auction_id\nWHERE h.horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star\")\nAND a.status = 'Active'\nAND h.k = 5\nORDER BY h.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "Certainly! Here's the analysis and formulation based on the provided SQL query:\n\n[EXPLANATION-START]\nThe SQL query is designed to retrieve the names of horses and the names of auctions from two tables: `horses` and `auctions`. It performs a join operation on the column `auction_id` to relate horses to their respective auctions. The query includes a vector search operation—using the `sqlite-lembed` extension—to find horses whose names have embeddings that most closely match the embedding for the word \"Star\" using the model 'all-MiniLM-L6-v2'. The condition `h.k = 5` indicates that the query should return 5 of the top horse entries based on their proximity in the vector space (sorted by the shortest distance). Additionally, it filters results to include only those auctions with a status of 'Active'. Finally, the results are ordered by the distance, ensuring that the closest matches appear first.\n[EXPLANATION-END]\n\n[QUESTION-START]\nI want to find the names of horses and the names of auctions for horses that are most closely related to the term \"Star\", using the top 5 matches based on cosine similarity. The query should only consider auctions that are currently active and sort the results by similarity distance.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nBettingSummary AS (\n    SELECT \n        bd.game_id,\n        AVG(bd.betting_odds) AS avg_betting_odds,\n        COUNT(bd.betting_id) AS total_bets\n    FROM betting_data bd\n    GROUP BY bd.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n),\nGameAnalysis AS (\n    SELECT \n        g.game_id,\n        g.season,\n        g.week,\n        tp.avg_wdvoa,\n        bs.avg_betting_odds,\n        bs.total_bets,\n        ls.location_similarity\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id\n    JOIN BettingSummary bs ON g.game_id = bs.game_id\n    JOIN LocationSimilarity ls ON g.game_id = ls.game_id\n    WHERE g.season = 2023\n)\nSELECT ga.avg_betting_odds\nFROM GameAnalysis ga\nWHERE ga.avg_wdvoa > 0.1\nAND ga.location_similarity < 0.5\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nBettingSummary AS (\n    SELECT \n        bd.game_id,\n        AVG(bd.betting_odds) AS avg_betting_odds,\n        COUNT(bd.betting_id) AS total_bets\n    FROM betting_data bd\n    GROUP BY bd.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n),\nGameAnalysis AS (\n    SELECT \n        g.game_id,\n        g.season,\n        g.week,\n        tp.avg_wdvoa,\n        bs.avg_betting_odds,\n        bs.total_bets,\n        ls.location_similarity\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id\n    JOIN BettingSummary bs ON g.game_id = bs.game_id\n    JOIN LocationSimilarity ls ON g.game_id = ls.game_id\n    WHERE g.season = 2023\n)\nSELECT ga.avg_betting_odds\nFROM GameAnalysis ga\nWHERE ga.avg_wdvoa > 0.1\nAND ga.location_similarity < 0.5\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "[EXPLANATION-START]\nThe SQL query begins by defining several Common Table Expressions (CTEs) to gather various pieces of data:\n\n1. **TeamPerformance:** Calculates the average weighted DVOA (Defense-adjusted Value Over Average) for each team by season from the `team_metrics` table.\n\n2. **BettingSummary:** Computes the average betting odds and total number of bets for each game from the `betting_data` table.\n\n3. **LocationSimilarity:** Performs a vector similarity search using the `location_embedding` column in the `games` table. It matches locations against an embedding for the string describing a specific stadium (\"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") using SQLite's `lembed` function. The results are ordered by distance, and the top 5 closest matches are selected.\n\n4. **GameAnalysis:** Combines data from the `games` table with the previously defined CTEs to aggregate various metrics for games in the 2023 season, including average weighted DVOA, average betting odds, total bets, and location similarity.\n\nFinally, the outer query selects the average betting odds from `GameAnalysis` where the average weighted DVOA is greater than 0.1 and the location similarity is less than 0.5. The query limits the result to 1 record.\n[EXPLANATION-END]\n\n[QUESTION-START]\nTop betting odds for games in the 2023 season where the team's average performance is above 0.1 and the stadium location is among the top 5 most similar to \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\", with similarity less than 0.5.\n[QUESTION-END]"
    ]
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bucky\")\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bucky\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true,
    "responses": [
      "**Column Information**\n- `horse_name`: The name of the horse.\n- `horse_name_embedding`: A vector representation of the horse name for similarity search.\n\n[EXPLANATION-START]\nThe SQL query is designed to retrieve the name of a horse from the `horses` table. It uses a vector similarity search operation via the `horse_name_embedding` column, which matches against a vector derived from the phrase \"Bucky\" using the model `all-MiniLM-L6-v2`. This operation utilizes the `sqlite-lembed` extension to perform the embedded vector comparison. The query is constrained to return only one result due to the `LIMIT 1` clause, aiming to find the horse name that is most similar to the vector representation of \"Bucky\".\n[EXPLANATION-END]\n\n[QUESTION-START]\nCould you tell me the name of the horse that is most related to \"Bucky\" using similarity search in the embedding space, and make sure you only provide one result?\n[QUESTION-END]"
    ]
  }
]